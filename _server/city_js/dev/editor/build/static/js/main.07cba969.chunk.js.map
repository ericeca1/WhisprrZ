{"version":3,"sources":["ObjectUI.js","ImportOBJ.js","ExportScene.js","ResetScene.js","Menu.js","index.js"],"names":["ObjectUI","_ref","_this","mesh","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","state","collapse","changeScale","event","val","target","value","scale","set","userData","changeBuffer","buffer","changeSide","parseInt","side","basicMaterial","shaderMaterial","changeShadows","shadows","changeMap","files","length","file","filename","name","reader","FileReader","img","Image","texture","BABYLON","wrapS","wrapT","onload","needsUpdate","addEventListener","src","result","readAsDataURL","map","uniforms","changeAlpha","alphaMap","transparent","alpha","changeLightMap","lightMap","defines","USE_LIGHTMAP","lightmap","changeAlphaTest","alphaTest","console","log","changeTransparent","changeColor","color","changeCollider","collider","wireframe","changeWireframe","changeOpacity","opacity","changePosX","pos","position","x","changePosY","z","changePosZ","y","changeRotX","rot","rotation","Math","PI","changeRotY","changeRotZ","changeVisible","visisble","visible","changeMixMap","mixMap","material","mixmap","changeAddMap1","addMap1","addmap1","changeAddMap2","addMap2","addmap2","changeAddMap3","addMap3","addmap3","changeAddMap4","addMap4","addmap4","count","i","wirframe","react_default","a","createElement","Container","Row","Col","Button","onClick","style","marginBottom","Collapse","isOpen","Card","CardBody","Form","FormGroup","Label","for","Input","type","id","onChange","selected","Component","OBJLoader","ColladaLoader","ImportOBJ","scene","extension","split","pop","toLowerCase","vert","join","frag","contents","collada","parse","updateMatrixWorld","children","vertexShader","fragmentShader","lightMapIntensity","geometry","applyMatrix","matrixWorld","add","ReactDOM","render","src_ObjectUI","key","uuid","document","getElementById","readAsText","object","JSZip","loadAsync","then","zip","async","assets","JSON","geos","textures","jsonloader","total","current","onLoad","mat","data","shaderMat","geo","s","fromArray","undefined","_loop","curAsset","folder","fromGeometry","Uint8Array","blob","Blob","body","appendChild","URL","createObjectURL","readAsBinaryString","alert","className","ExportScene","locTextures","locGeometry","toJSON","metadata","version","generator","parameters","vertices","vertex","push","faces","normals","normalsHash","colors","colorsHash","uvs","uvsHash","uvs2","uvsHash2","face","hasFaceVertexUv","faceVertexUvs","hasFaceVertexUv2","hasFaceNormal","normal","hasFaceVertexNormal","vertexNormals","hasFaceColor","r","g","b","hasFaceVertexColor","vertexColors","faceType","setBit","c","materialIndex","getUvIndex","faceVertexUvs2","getUvIndex2","getNormalIndex","getColorIndex","enabled","hash","toString","getHex","uv","obj","locations","imgList","asset","indexOf","image","base64","fromBufferGeometry","stringify","generateAsync","content","saveAs","ResetScene","Menu","importOBJ","importDAE","setSceneWirframe","sceneWirframe","parent","importDropdownOpen","Navbar","light","expand","addon","aria-label","checked","NavbarToggler","navbar","Nav","NavItem","NavLink","src_ResetScene","src_ExportScene","src_ImportOBJ","OrbitControls","require","objectGroup","App","onWindowResize","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","mount","domElement","line","controls","animate","requestAnimationFrame","update","_this2","ref","rootElement","src_App","src_Menu"],"mappings":"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","file":"static/js/main.07cba969.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Collapse, Button, CardBody, Card, Container, Row, Col, Form, FormGroup, Label, Input } from 'reactstrap';\nimport * as BABYLON from \"babylon\";\n\nclass ObjectUI extends Component {\n  constructor({ mesh }) {\n    super();\n    //console.log(mesh.userData);\n    let count = 0;\n    var state = {};\n    for (let i in mesh.userData) {\n      count++;\n      state[i] = mesh.userData[i];\n    }\n    this.mesh = mesh;\n    if (count) {\n      this.state = state;\n    }\n    else {\n      this.state = {\n        collapse: false,\n        scale: '1',\n        buffer: '1',\n        side: '0',\n        shadows: false,\n        map: null,\n        alpha: null,\n        lightmap: null,\n        alphaTest: '0',\n        transparent: '0',\n        opacity: '1',\n        color: 'ffffff',\n        collider: '0',\n        wirframe: '0',\n        pos: [0, 0, 0],\n        rot: [0, 0, 0],\n        mixmap: null,\n        addmap1: null,\n        addmap2: null,\n        addmap3: null,\n        addmap4: null\n      };\n\n\n      this.mesh.userData = {\n        scale: '1',\n        buffer: '1',\n        side: '0',\n        shadows: false,\n        map: null,\n        alpha: null,\n        lightmap: null,\n        alphaTest: '0',\n        transparent: '0',\n        opacity: '1',\n        color: 'ffffff',\n        collider: '0',\n        wirframe: '0',\n        pos: [0, 0, 0],\n        rot: [0, 0, 0],\n        mixmap: null,\n        addmap1: null,\n        addmap2: null,\n        addmap3: null,\n        addmap4: null\n      };\n    }\n\n    this.state.visible = true;\n    //this.updateUserData();\n\n\n    //console.log(mesh);\n\n  }\n\n  toggle = () => {\n    this.setState(state => ({ collapse: !state.collapse }));\n  }\n\n  changeScale = (event) => {\n    //console.log(event.target.value);\n    let val = event.target.value;\n    this.setState(state => ({ scale: val }));\n    this.mesh.scale.set(val, val, val);\n    this.mesh.userData.scale = val;\n    //this.updateUserData();\n\n  }\n\n  changeBuffer = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ buffer: val }));\n    //this.updateUserData();\n    this.mesh.userData.buffer = val;\n  }\n\n  changeSide = (event) => {\n\n    let val = parseInt(event.target.value);\n\n    this.setState(state => ({ side: val }));\n    this.mesh.basicMaterial.side = val;\n    this.mesh.shaderMaterial.side = val;\n    //this.updateUserData();\n    this.mesh.userData.side = val;\n\n  }\n\n  changeShadows = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ shadows: val }));\n    //this.updateUserData();\n    this.mesh.userData.shadows = val;\n  }\n\n  changeMap = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.basicMaterial.map = texture;\n      this.mesh.basicMaterial.needsUpdate = true;\n      this.mesh.shaderMaterial.uniforms.map.value = texture;\n      //console.log(file.name);\n      this.setState(state => ({ map: filename }));\n      //this.updateUserData();\n      this.mesh.userData.map = filename;\n      event.target.value = '';\n    }\n\n  }\n\n  changeAlpha = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.basicMaterial.alphaMap = texture;\n      this.mesh.basicMaterial.transparent = true;\n      this.mesh.basicMaterial.needsUpdate = true;\n\n      this.setState(state => ({ alpha: filename }));\n      //this.setState(state => ({ transparent: '1' }));\n      //this.updateUserData();\n      this.mesh.userData.alpha = filename;\n      //this.mesh.userData.transparent = '1';\n      event.target.value = '';\n    }\n  }\n\n  changeLightMap = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.basicMaterial.lightMap = texture;\n      this.mesh.basicMaterial.needsUpdate = true;\n\n      this.mesh.shaderMaterial.uniforms.lightMap.value = texture;\n      this.mesh.shaderMaterial.defines.USE_LIGHTMAP = true;\n      this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ lightMap: filename }));\n      //this.updateUserData();\n      //console.log(this.state);\n      this.mesh.userData.lightmap = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAlphaTest = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ alphaTest: val }));\n    this.mesh.basicMaterial.alphaTest = val;\n    this.mesh.basicMaterial.needsUpdate = true;\n    //this.updateUserData();\n    this.mesh.userData.alphaTest = val;\n    console.log(val);\n\n  }\n\n  changeTransparent = (event) => {\n    let val = parseInt(event.target.value);\n    this.setState(state => ({ transparent: val }));\n    this.mesh.basicMaterial.transparent = (val ) ? true : false;\n    this.mesh.basicMaterial.needsUpdate = true;\n       //console.log(this.mesh.material.transparent, val,  this.state.alpha, (val || this.state.alpha));\n    //this.updateUserData();\n    this.mesh.userData.transparent = val;\n\n  }\n\n\n  changeColor = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ color: val }));\n    this.mesh.basicMaterial.color.set(parseInt(val, 16));\n    //this.updateUserData();\n    this.mesh.userData.color = val;\n\n  }\n\n  changeCollider = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ collider: val }));\n    if (val === '1') {\n      this.setState(state => ({ buffer: '0' }));\n    }\n    else {\n      this.setState(state => ({ buffer: '1' }));\n    }\n\n\n    this.mesh.basicMaterial.wireframe = (val == '1') ? true : false;\n\n    this.mesh.basicMaterial.needsUpdate = true;\n    //this.updateUserData();\n    this.mesh.userData.collider = val;\n\n  }\n\n  changeWireframe = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ wireframe: val }));\n\n\n    this.mesh.basicMaterial.wireframe = (val === '1' || this.state.collider == '1') ? true : false;\n\n    this.mesh.basicMaterial.needsUpdate = true;\n    //this.updateUserData();\n    this.mesh.userData.wireframe = val;\n\n  }\n\n  changeOpacity = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ opacity: val }));\n    this.mesh.basicMaterial.opacity = val;\n    //this.updateUserData();\n    this.mesh.userData.opacity = val;\n    if(val != 1 ){\n      this.setState(state => ({ transparent: '1' }));\n      this.mesh.userData.transparent = '1';\n      this.mesh.basicMaterial.transparent = true;\n\n    }\n\n  }\n\n\n\n  changePosX = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [val, this.state.pos[1], this.state.pos[2]] }));\n    this.mesh.position.x = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[0] = val;\n\n  }\n\n  changePosY = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.pos[0], val, this.state.pos[2]] }));\n    this.mesh.position.z = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[1] = val;\n\n  }\n\n  changePosZ = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.pos[0], this.state.pos[1], val] }));\n    this.mesh.position.y = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[2] = val;\n\n  }\n\n  changeRotX = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ rot: [val, this.state.rot[1], this.state.rot[2]] }));\n    this.mesh.rotation.x = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[0] = val;\n\n  }\n\n  changeRotY = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.rot[0], val, this.state.rot[2]] }));\n    this.mesh.rotation.y = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[1] = val;\n\n  }\n\n  changeRotZ = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.rot[0], this.state.rot[1], val] }));\n    this.mesh.rotation.z = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[2] = val;\n  }\n\n  changeVisible = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ visisble: val }));\n    this.mesh.visible = (val == '1') ? true : false;\n    //console.log(this.mesh.visible);\n  }\n\n  changeMixMap = (event) => {\n    //let val = event.target.value;\n    //this.setState(state => ({ mixmap: val }));\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.mixMap.value = texture;\n      this.mesh.material = this.mesh.shaderMaterial;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ mixMap: filename }));\n      \n      this.mesh.userData.mixmap = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap1 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap1.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap1: filename }));\n      \n      this.mesh.userData.addmap1 = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap2 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap2.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap2: filename }));\n      \n      this.mesh.userData.addmap2 = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap3 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap3.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap3: filename }));\n      \n      this.mesh.userData.addmap3 = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap4 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap4.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap4: filename }));\n      \n      this.mesh.userData.addmap4 = filename;\n      event.target.value = '';\n    }\n  }\n\n\n  render() {\n    //console.log(this.state.transparent);\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col>{this.mesh.name}</Col>\n            <Col>  <Button color=\"primary\" onClick={this.toggle} style={{ marginBottom: '1rem' }}>Options</Button></Col>\n          </Row>\n        </Container>\n\n        <Collapse isOpen={this.state.collapse}>\n          <Card>\n            <CardBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"buffer\">Visible</Label>\n                  <Input type=\"select\" name=\"visible\" id=\"buffer\" onChange={this.changeVisible}>\n                    <option selected={this.state.visisble == '1'}>1</option>\n                    <option selected={this.state.visisble == '0'}>0</option>\n\n\n                  </Input>\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"scale\">Scale</Label>\n                  <Input name=\"scale\" id=\"scale\" value={this.state.scale} onChange={this.changeScale} />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"buffer\">BufferGeometry</Label>\n                  <Input type=\"select\" name=\"buffer\" id=\"buffer\" onChange={this.changeBuffer}>\n                    <option selected={this.state.buffer == '1'}>1</option>\n                    <option selected={this.state.buffer == '0'}>0</option>\n\n\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"side\">Face Side</Label>\n                  <Input type=\"select\" name=\"side\" id=\"side\" onChange={this.changeSide}>\n                    <option>0</option>\n                    <option>1</option>\n                    <option>2</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"shadows\">Floor (shadows)</Label>\n                  <Input type=\"select\" name=\"shadows\" id=\"shadows\" onChange={this.changeShadows}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n\n                <FormGroup>\n                  <Label for=\"map\">Diffuse map</Label>\n                  <Row>\n                    <Col ><Input type=\"file\" name=\"map\" id=\"map\" onChange={this.changeMap} style={{ color: 'transparent' }} /></Col>\n                    <Col>{this.mesh.userData.map}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"alpha\">Alpha map</Label>\n                  <Row>\n                    <Col >\n                      <Input type=\"file\" name=\"alpha\" id=\"alpha\" onChange={this.changeAlpha} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.alpha}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Light map</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"light\" id=\"light\" onChange={this.changeLightMap} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.lightmap}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Mix map</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeMixMap} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.mixmap}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 1</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap1} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap1}</Col>\n                  </Row>\n                </FormGroup>\n\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 2</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap2} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap2}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 3</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap3} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap3}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 4</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap4} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap4}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"alphaTest\">alphaTest</Label>\n                  <Input name=\"alphaTest\" id=\"alphaTest\" value={this.state.alphaTest} onChange={this.changeAlphaTest} />\n                </FormGroup>\n\n                \n\n                <FormGroup>\n                  <Label for=\"transparent\">Transparent</Label>\n                  <Input type=\"select\" name=\"transparent\" id=\"transparent\" onChange={this.changeTransparent}>\n                    <option selected={this.state.transparent == '0'}>0</option>\n                    <option selected={this.state.transparent == '1'}>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"opacity\">Opacity</Label>\n                  <Input name=\"scale\" id=\"scale\" value={this.state.opacity} onChange={this.changeOpacity} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"color\">Color</Label>\n                  <Input name=\"color\" id=\"color\" value={this.state.color} onChange={this.changeColor} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"collider\">Collider</Label>\n                  <Input type=\"select\" name=\"collider\" id=\"collider\" onChange={this.changeCollider}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"wireframe\">Wireframe</Label>\n                  <Input type=\"select\" name=\"wireframe\" id=\"wireframe\" onChange={this.changeWireframe}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"pos\">Position</Label>\n                  <Input name=\"posX\" id=\"posX\" value={this.state.pos[0]} onChange={this.changePosX} />\n                  <Input name=\"posY\" id=\"posY\" value={this.state.pos[1]} onChange={this.changePosY} />\n                  <Input name=\"posZ\" id=\"posZ\" value={this.state.pos[2]} onChange={this.changePosZ} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"pos\">Rotation</Label>\n                  <Input name=\"rotX\" id=\"rotX\" value={this.state.rot[0]} onChange={this.changeRotX} />\n                  <Input name=\"rotY\" id=\"rotY\" value={this.state.rot[1]} onChange={this.changeRotY} />\n                  <Input name=\"rotZ\" id=\"rotZ\" value={this.state.rot[2]} onChange={this.changeRotZ} />\n                </FormGroup>\n\n\n\n              </Form>\n            </CardBody>\n          </Card>\n        </Collapse>\n\n      </div>\n    )\n  }\n}\n\nexport default ObjectUI;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectUI from './ObjectUI';\nimport * as BABYLON from \"babylon\";\nimport * as OBJLoader from 'babylon-obj-loader';\nimport * as ColladaLoader from 'babylon-collada-loader';\nimport './index.css';\nimport JSZip from \"jszip\";\n\nOBJLoader(BABYLON);\nColladaLoader(BABYLON);\n\nclass ImportOBJ extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        //console.log(event);\n        let files = event.target.files;\n        if (files.length) {\n            var file = files[0];\n            var filename = file.name;\n            var extension = filename.split('.').pop().toLowerCase();\n            var reader = new FileReader();\n            //console.log(this.scene);\n            let scene = this.scene;\n\n            let vert = [\n           \n            'varying vec2 vUv;',\n            'varying vec2 vUv2;',\n            'attribute vec2 uv2;',\n            \n\n            'void main( void ) {',\n            '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '\tvUv = uv;',\n            '\tvUv2 = uv2;',\n            '\tgl_Position = projectionMatrix * mvPosition;',\n          \n            '}'\n            ].join('\\n');\n\n           \n\n            let frag = [\n                'varying vec2 vUv;',\n                'varying vec2 vUv2;',\n                'uniform sampler2D map;',\n                'uniform sampler2D mixMap;',\n                'uniform sampler2D addMap1;',\n                'uniform sampler2D addMap2;',\n                'uniform sampler2D addMap3;',\n                'uniform sampler2D addMap4;',\n                'uniform sampler2D lightMap;',\n                'uniform float lightMapIntensity;',\n              \n              \n            \n               \n                'void main( void ) {',\n                '\tvec4 textureColor = texture2D(map, vUv);',\n                '\tvec4 mmap = texture2D(mixMap, vUv2);',\n                '\tvec4 textureColor1 = texture2D(addMap1, vUv);',\n                '\tvec4 textureColor2 = texture2D(addMap2, vUv);',\n                '\tvec4 textureColor3 = texture2D(addMap3, vUv);',\n                '\tvec4 textureColor4 = texture2D(addMap4, vUv);',\n              \n                '   vec3 color = textureColor.xyz;',\n                '\tcolor = mix( color, textureColor1.xyz, mmap.r );',\n                '\tcolor = mix( color, textureColor2.xyz, mmap.g );',\n                '\tcolor = mix( color, textureColor3.xyz, mmap.b );',\n                /*'\tcolor = mix( color, textureColor4.xyz, mmap.a );',*/\n                'vec3 indirectDiffuse = vec3(1.0);',\n\n                '#ifdef USE_LIGHTMAP',\n                'indirectDiffuse = texture2D( lightMap, vUv2 ).xyz * lightMapIntensity;',\n                'if(indirectDiffuse.x < 0.5) {',\n                '   color.x = 2.0 * indirectDiffuse.x * color.x;',\n                '}',\n                'else {',\n                '   color.x = 1.0 - 2.0 * (1.0 - indirectDiffuse.x) * (1.0 - color.x);',\n                '}',\n\n                'if(indirectDiffuse.y < 0.5) {',\n                '   color.y = 2.0 * indirectDiffuse.y * color.y;',\n                '}',\n                'else {',\n                '   color.y = 1.0 - 2.0 * (1.0 - indirectDiffuse.y) * (1.0 - color.y);',\n                '}',\n\n                'if(indirectDiffuse.z < 0.5) {',\n                '   color.z = 2.0 * indirectDiffuse.z * color.z;',\n                '}',\n                'else {',\n                '   color.z = 1.0 - 2.0 * (1.0 - indirectDiffuse.z) * (1.0 - color.z);',\n                '}',\n\n                \n                \n      \n                '#endif',\n        \n                '\tgl_FragColor = vec4(color, 1.0);',\n                '}' \n            ].join('\\n');\n\n            \n          \n\n\n            switch (extension) {\n                case 'dae':\n\n                    reader.addEventListener('load', (event) => {\n\n                        var contents = event.target.result;\n                        this.BABYLON = BABYLON;\n\n                        var loader = new ColladaLoader();\n                        var collada = loader.parse(contents);\n\n                        collada.scene.name = filename;\n                        //console.log(collada);\n                        //this.scene.add(collada.scene);\n                        collada.scene.scale.set(1,1,1);\n                        collada.scene.updateMatrixWorld(true);\n                        for (let i in collada.scene.children) {\n                            collada.scene.children[i].children[0].material = new BABYLON.MeshBasicMaterial();\n                            collada.scene.children[i].children[0].basicMaterial =  collada.scene.children[i].children[0].material;\n\n                            collada.scene.children[i].children[0].shaderMaterial = new BABYLON.ShaderMaterial({\n                                vertexShader: vert,\n                                fragmentShader: frag,\n                                uniforms: {\n                \n                                    map: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n\n                                    lightMap: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n\n                                    lightMapIntensity: {\n                                        type: \"f\",\n                                        value: 1,\n                                    },\n                    \n                                    mixMap: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap1: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap2: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap3: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap4: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    }\n                                }\n                            });\n\n                            collada.scene.children[i].children[0].shaderMaterial.defines.USE_LIGHTMAP = false;\n                \n\n                            collada.scene.children[i].children[0].name = collada.scene.children[i].name;\n                            //let pos = collada.scene.children[i].position;\n                            //console.log(pos);\n                            //collada.scene.children[i].children[0].position.copy(collada.scene.children[i].position);\n                            //collada.scene.children[i].children[0].geometry.translate(pos.x, pos.y, pos.z);\n                            collada.scene.children[i].children[0].geometry.applyMatrix(collada.scene.children[i].children[0].matrixWorld);\n\n                            collada.scene.children[i].children[0].position.set(0,0,0);\n                            collada.scene.children[i].children[0].rotation.set(0,0,0);\n                            collada.scene.children[i].children[0].scale.set(1,1,1);\n\n                            //console.log(collada.scene.children[i].children[0].position);\n\n                            //collada.scene.children[i].children[0].rotation.copy(collada.scene.children[i].rotation);\n                            //collada.scene.children[i].children[0].geometry.rotateX(collada.scene.children[i].rotation.x);\n                            //collada.scene.children[i].children[0].geometry.rotateY(collada.scene.children[i].rotation.y);\n                            //collada.scene.children[i].children[0].geometry.rotateZ(collada.scene.children[i].rotation.z);\n\n\n                            this.scene.add(collada.scene.children[i].children[0]);\n                        }\n                        //console.log(collada.scene.children);\n\n                        ReactDOM.render(\n                            <div>\n                                {\n                                    this.scene.children.map((mesh) => {\n\n                                        return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                    })\n                                }\n                            </div>, document.getElementById(\"ui\"));\n\n\n\n                    }, false);\n\n                    reader.readAsText(file);\n\n                    break;\n\n                case 'obj':\n\n                    reader.addEventListener('load', (event) => {\n\n                        var contents = event.target.result;\n                        //console.log( BABYLON.OBJLoader );\n                        this.BABYLON = BABYLON;\n                        var object = new this.BABYLON.OBJLoader().parse(contents);\n                        object.name = filename;\n\n                        //this.scene.add(object);\n                        //console.log(object);\n\n                        for (let i in object.children) {\n                            object.children[i].material = new BABYLON.MeshBasicMaterial();\n                            object.children[i].basicMaterial =  object.children[i].material;\n                            object.children[i].shaderMaterial = new BABYLON.ShaderMaterial({\n                                vertexShader: vert,\n                                fragmentShader: frag,\n                                uniforms: {\n                \n                                    map: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n\n                                    lightMap: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n\n                                    lightMapIntensity: {\n                                        type: \"f\",\n                                        value: 1,\n                                    },\n                    \n                                    mixMap: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap1: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap2: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap3: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap4: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    }\n                                }\n                            });\n\n                            //console.log( object.children[i].shaderMaterial);\n                            object.children[i].shaderMaterial.defines.USE_LIGHTMAP = false;\n                \n                            this.scene.add(object.children[i]);\n                        }\n                        ReactDOM.render(\n                            <div>\n                                {\n                                    this.scene.children.map((mesh) => {\n\n                                        return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                    })\n                                }\n                            </div>, document.getElementById(\"ui\"));\n\n                        //console.log(object);\n\n                    }, false);\n                    reader.readAsText(file);\n\n                    break;\n\n                case 'zip':\n                    reader.addEventListener('load', (event) => {\n                        let zip = new JSZip();\n                        zip.loadAsync(event.target.result)\n                            .then(function (zip) {\n                                zip.file('assets.js').async(\"string\").then(function (value) {\n                                    //console.log(value);\n                                    let assets = JSON.parse(value);\n                                    console.log(assets);\n                                    let geos = {};\n                                    let textures = {};\n                                    let jsonloader = new BABYLON.JSONLoader();\n                                    let total = 0;\n                                    let current = 0;\n                                    let onLoad = function () {\n                                        console.log('onLoad', current,  total);\n                                        if (current == total) {\n                                            for (let i in assets) {\n                                                let mat = new BABYLON.MeshBasicMaterial();\n\n                                                                                    \n                                                let data = {\n                                                    color: 'ffffff',\n                                                    scale: assets[i].scale,\n                                                    buffer: (assets[i].buffer) ? '1' : '0',\n                                                    side: assets[i].side,\n                                                    shadows: (assets[i].shadows) ? '1' : '0',\n                                                    alphaTest: assets[i].alphaTest || '0',\n                                                    transparent: (assets[i].transparent) ? '1' : '0',\n                                                    opacity: assets[i].opacity,\n                                                    collider: (assets[i].collider) ? '1' : '0',\n                                                    wirframe: (assets[i].wirframe) ? '1' : '0',\n                                                    pos: assets[i].pos,\n                                                    rot: assets[i].rot\n                                                };\n\n\n                                                let shaderMat = new BABYLON.ShaderMaterial({\n                                                    vertexShader: vert,\n                                                    fragmentShader: frag,\n                                                    uniforms: {\n                                    \n                                                        map: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n\n                                                        lightMap: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n\n                                                        lightMapIntensity: {\n                                                            type: \"f\",\n                                                            value: 1,\n                                                        },\n                                        \n                                                        mixMap: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap1: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap2: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap3: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap4: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        }\n                                                    }\n                                                });\n\n                                                shaderMat.defines.USE_LIGHTMAP = false;\n\n                                                if (assets[i].map) {\n                                                    mat.map = textures[assets[i].map];\n                                                    data.map = assets[i].map;\n                                                    shaderMat.uniforms.map.value = textures[assets[i].map];\n                                                }\n\n                                                if (assets[i].mixmap) {\n                                                    data.mixmap = assets[i].mixmap;                                                   \n                                                    shaderMat.uniforms.mixMap.value = textures[assets[i].mixmap];\n                                                }\n\n                                                if (assets[i].addmap1) {\n                                                    data.addmap1 = assets[i].addmap1; \n                                                    shaderMat.uniforms.addMap1.value = textures[assets[i].addmap1];\n                                                }\n\n                                                if (assets[i].addmap2) {\n                                                    data.addmap2 = assets[i].addmap2; \n                                                    shaderMat.uniforms.addMap2.value = textures[assets[i].addmap2];\n                                                }\n\n                                                if (assets[i].addmap3) {\n                                                    data.addmap3 = assets[i].addmap3; \n                                                    shaderMat.uniforms.addMap3.value = textures[assets[i].addmap3];\n                                                }\n\n                                                if (assets[i].addmap4) {\n                                                    data.addmap4 = assets[i].addmap4; \n                                                    shaderMat.uniforms.addMap4.value = textures[assets[i].addmap4];\n                                                }\n\n\n\n\n                                                if (assets[i].alpha) {\n                                                    mat.alphaMap = textures[assets[i].alpha];\n                                                    data.alpha = assets[i].alpha;\n                                                  \n                                                }\n\n                                                if (assets[i].lightmap) {\n                                                    mat.lightMap = textures[assets[i].lightmap];\n                                                    data.lightmap = assets[i].lightmap;\n                                                    shaderMat.uniforms.lightMap.value = textures[assets[i].lightmap];\n                                                    shaderMat.defines.USE_LIGHTMAP = true;\n                                                    //console.log( shaderMat.uniforms);\n                                                }\n\n                                                let mesh = new BABYLON.Mesh(geos[assets[i].geo], mat);\n\n                                                //console.log();\n                                                mesh.userData = data;\n\n                                                if (assets[i].alphaTest) {\n                                                    mat.alphaTest = assets[i].alphaTest;\n                                                }\n\n                                                if (assets[i].transparent) {\n                                                    mat.transparent = true;\n                                                }\n\n                                                if (assets[i].collider || assets[i].wireframe) {\n                                                    mat.wireframe = true\n                                                }\n\n                                                if (assets[i].side) {\n                                                    mat.side = assets[i].side;\n                                                }\n\n                                                if (assets[i].scale) {\n                                                    let s = assets[i].scale;\n                                                    mesh.scale.set(s, s, s);\n                                                }\n\n                                                let pos = data.pos;\n                                                mesh.position.fromArray(pos);\n\n                                                let rot = assets[i].rot;\n                                                mesh.rotation.x = rot[0] / 180 * Math.PI;\n                                                mesh.rotation.y = rot[1] / 180 * Math.PI;\n                                                mesh.rotation.z = rot[2] / 180 * Math.PI;\n\n                                                if (assets[i].opacity !== undefined) {\n                                                    mat.opacity = assets[i].opacity;\n                                                }\n\n\n\n                                                mesh.basicMaterial = mat;\n                                                mesh.shaderMaterial = shaderMat;\n                                                if(data.mixmap) {\n                                                    mesh.material = shaderMat;\n                                                    console.log(data.mixmap, shaderMat);\n                                                }\n                                                mesh.name = i;\n                                                scene.add(mesh);\n                                                //scope.scene.add(mesh);\n\n                                            }\n                                            //console.log(scene);\n\n                                            ReactDOM.render(\n                                                <div>\n                                                    {\n                                                        scene.children.map((mesh) => {\n\n                                                            return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                                        })\n                                                    }\n                                                </div>, document.getElementById(\"ui\"));\n                                        }\n                                        \n                                    };\n                                    for (let i in assets) {\n                                        total++;\n                                        //console.log('geo', total);\n                                        let curAsset = assets[i];\n                                        console.log(curAsset);\n                                        zip.folder('geometry').folder('loc').file(assets[i].geo).async('string').then(function (value) {\n                                            current++;\n                                            let geo = jsonloader.parse(JSON.parse(value));\n                                            geos[curAsset.geo] = new BABYLON.BufferGeometry();\n                                            geos[curAsset.geo].fromGeometry(geo.geometry);\n                                            //console.log(geo);\n                                            console.log('geo',  current);\n\n                                            onLoad();\n                                        });\n\n                                        if (assets[i].map) {\n                                            total++;\n                                           // console.log('map', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].map).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                        console.log('map',  current);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.map] = new BABYLON.Texture(img);\n                                                    textures[curAsset.map].needsUpdate = true;\n                                                    textures[curAsset.map].wrapS = textures[curAsset.map].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.map].blob = blob;\n                                                   \n\n                                                });\n                                        }\n\n                                        if (assets[i].alpha) {\n                                            total++;\n                                            //console.log('alpha', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].alpha).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.alpha] = new BABYLON.Texture(img);\n                                                    textures[curAsset.alpha].needsUpdate = true;\n                                                    textures[curAsset.alpha].wrapS = textures[curAsset.alpha].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.alpha].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].lightmap) {\n                                            total++;\n                                            //console.log('lightmap', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].lightmap).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                        console.log('lightmap',  current);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.lightmap] = new BABYLON.Texture(img);\n                                                    textures[curAsset.lightmap].needsUpdate = true;\n                                                    textures[curAsset.lightmap].wrapS = textures[curAsset.lightmap].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.lightmap].blob = blob;\n                                                   \n\n                                                });\n                                        }\n\n                                        if (assets[i].mixmap) {\n                                            total++;\n                                            //console.log('mixmap', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].mixmap).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                        console.log('mixmap',  current);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.mixmap] = new BABYLON.Texture(img);\n                                                    textures[curAsset.mixmap].needsUpdate = true;\n                                                    textures[curAsset.mixmap].wrapS = textures[curAsset.mixmap].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.mixmap].blob = blob;\n                                                    \n\n                                                });\n                                        }\n\n                                        if (assets[i].addmap1) {\n                                            total++;\n                                           // console.log('addmap1', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap1).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                        console.log('addmap1',  current);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap1] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap1].needsUpdate = true;\n                                                    textures[curAsset.addmap1].wrapS = textures[curAsset.addmap1].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap1].blob = blob;\n                                                   \n\n                                                });\n                                        }\n\n\n                                        if (assets[i].addmap2) {\n                                            total++;\n                                           // console.log('addmap2', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap2).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                        console.log('addmap2',  current);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap2] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap2].needsUpdate = true;\n                                                    textures[curAsset.addmap2].wrapS = textures[curAsset.addmap2].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap2].blob = blob;\n                                                   \n\n                                                });\n                                        }\n\n\n                                        if (assets[i].addmap3) {\n                                            total++;\n                                            //console.log('addmap3', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap3).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                        console.log('addmap3',  current);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap3] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap3].needsUpdate = true;\n                                                    textures[curAsset.addmap3].wrapS = textures[curAsset.addmap3].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap3].blob = blob;\n                                                    \n\n                                                });\n                                        }\n\n                                        if (assets[i].addmap4) {\n                                            total++;\n                                            //console.log('addmap4', total);\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap4).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                        console.log('addmap4',  current);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap4] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap4].needsUpdate = true;\n                                                    textures[curAsset.addmap4].wrapS = textures[curAsset.addmap4].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap4].blob = blob;\n                                                   \n\n                                                });\n                                        }\n\n                                    }\n                                });\n                                // you now have every files contained in the loaded zip\n                                //new_zip.file(\"hello.txt\").async(\"string\"); // a promise of \"Hello World\\n\"\n                            });\n                    }, false);\n                    reader.readAsBinaryString(file);\n\n                    break;\n                default:\n                    alert('bad format');\n                    break;\n            }\n            event.target.value = '';\n           \n        }\n    }\n\n    render() {\n        return (\n            <label>Import<input type=\"file\" name=\"file\" onChange={this.toggle} className=\"hidden\" /></label>\n\n        )\n    }\n}\n\nexport default ImportOBJ;\n\n\n","import React, { Component } from \"react\";\nimport JSZip from \"jszip\";\nimport * as BABYLON from \"babylon\";\nimport { saveAs } from '@progress/kendo-file-saver';\n\nclass ExportScene extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        let zip = new JSZip();\n        let textures = zip.folder(\"textures\");\n        let locTextures = textures.folder('loc');\n        let geometry = zip.folder(\"geometry\");\n        let locGeometry = geometry.folder(\"loc\");\n\n        let toJSON = function() {\n\n            var data = {\n                metadata: {\n                    version: 4.5,\n                    type: 'Geometry',\n                    generator: 'Geometry.toJSON'\n                }\n            };\n\n            // standard Geometry serialization\n\n            data.uuid = this.uuid;\n            data.type = this.type;\n            if (this.name !== '') data.name = this.name;\n\n            if (this.parameters !== undefined) {\n\n                var parameters = this.parameters;\n\n                for (var key in parameters) {\n\n                    if (parameters[key] !== undefined) data[key] = parameters[key];\n\n                }\n\n                return data;\n\n            }\n\n            var vertices = [];\n\n            for (var i = 0; i < this.vertices.length; i++) {\n\n                var vertex = this.vertices[i];\n                vertices.push(vertex.x, vertex.y, vertex.z);\n\n            }\n\n            var faces = [];\n            var normals = [];\n            var normalsHash = {};\n            var colors = [];\n            var colorsHash = {};\n            var uvs = [];\n            var uvsHash = {};\n            var uvs2 = [];\n            var uvsHash2 = {};\n\n            for (var i = 0; i < this.faces.length; i++) {\n\n                var face = this.faces[i];\n\n                var hasMaterial = true;\n                var hasFaceUv = false; // deprecated\n                var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n                var hasFaceVertexUv2 = this.faceVertexUvs[1] !== undefined;\n                var hasFaceNormal = face.normal.length() > 0;\n                var hasFaceVertexNormal = face.vertexNormals.length > 0;\n                var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n                var hasFaceVertexColor = face.vertexColors.length > 0;\n\n                var faceType = 0;\n\n                faceType = setBit(faceType, 0, 0); // isQuad\n                faceType = setBit(faceType, 1, hasMaterial);\n                faceType = setBit(faceType, 2, hasFaceUv);\n                faceType = setBit(faceType, 3, hasFaceVertexUv);\n                faceType = setBit(faceType, 4, hasFaceNormal);\n                faceType = setBit(faceType, 5, hasFaceVertexNormal);\n                faceType = setBit(faceType, 6, hasFaceColor);\n                faceType = setBit(faceType, 7, hasFaceVertexColor);\n\n                faces.push(faceType);\n                faces.push(face.a, face.b, face.c);\n                faces.push(face.materialIndex);\n\n                if (hasFaceVertexUv) {\n\n                    var faceVertexUvs = this.faceVertexUvs[0][i];\n\n                    faces.push(\n                        getUvIndex(faceVertexUvs[0]),\n                        getUvIndex(faceVertexUvs[1]),\n                        getUvIndex(faceVertexUvs[2])\n                    );\n\n                }\n\n                if (hasFaceVertexUv2) {\n\n                    var faceVertexUvs2 = this.faceVertexUvs[1][i];\n\n                    faces.push(\n                        getUvIndex2(faceVertexUvs2[0]),\n                        getUvIndex2(faceVertexUvs2[1]),\n                        getUvIndex2(faceVertexUvs2[2])\n                    );\n\n                } else {\n                    console.log('no uv2');\n                }\n\n                if (hasFaceNormal) {\n\n                    faces.push(getNormalIndex(face.normal));\n\n                }\n\n                if (hasFaceVertexNormal) {\n\n                    var vertexNormals = face.vertexNormals;\n\n                    faces.push(\n                        getNormalIndex(vertexNormals[0]),\n                        getNormalIndex(vertexNormals[1]),\n                        getNormalIndex(vertexNormals[2])\n                    );\n\n                }\n\n                if (hasFaceColor) {\n\n                    faces.push(getColorIndex(face.color));\n\n                }\n\n                if (hasFaceVertexColor) {\n\n                    var vertexColors = face.vertexColors;\n\n                    faces.push(\n                        getColorIndex(vertexColors[0]),\n                        getColorIndex(vertexColors[1]),\n                        getColorIndex(vertexColors[2])\n                    );\n\n                }\n\n            }\n\n            function setBit(value, position, enabled) {\n\n                return enabled ? value | (1 << position) : value & (~(1 << position));\n\n            }\n\n            function getNormalIndex(normal) {\n\n                var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n                if (normalsHash[hash] !== undefined) {\n\n                    return normalsHash[hash];\n\n                }\n\n                normalsHash[hash] = normals.length / 3;\n                normals.push(normal.x, normal.y, normal.z);\n\n                return normalsHash[hash];\n\n            }\n\n            function getColorIndex(color) {\n\n                var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n                if (colorsHash[hash] !== undefined) {\n\n                    return colorsHash[hash];\n\n                }\n\n                colorsHash[hash] = colors.length;\n                colors.push(color.getHex());\n\n                return colorsHash[hash];\n\n            }\n\n            function getUvIndex(uv) {\n\n                var hash = uv.x.toString() + uv.y.toString();\n\n                if (uvsHash[hash] !== undefined) {\n\n                    return uvsHash[hash];\n\n                }\n\n                uvsHash[hash] = uvs.length / 2;\n                uvs.push(uv.x, uv.y);\n\n                return uvsHash[hash];\n\n            }\n\n            function getUvIndex2(uv) {\n\n                var hash = uv.x.toString() + uv.y.toString();\n\n                if (uvsHash2[hash] !== undefined) {\n\n                    return uvsHash2[hash];\n\n                }\n\n                uvsHash2[hash] = uvs2.length / 2;\n                uvs2.push(uv.x, uv.y);\n\n                return uvsHash2[hash];\n\n            }\n\n            data.data = {};\n\n            data.data.vertices = vertices;\n            data.data.normals = normals;\n            if (colors.length > 0) data.data.colors = colors;\n            if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n            if (uvs2.length > 0) data.data.uvs.push(uvs2);\n            console.log(uvs2);\n            data.data.faces = faces;\n\n            return data;\n\n        };\n\n\n        let assets = {};\n        let obj = [];\n        let locations = {\n            obj: obj,\n            z: 20\n        };\n        let imgList = [];\n        for (let i in this.scene.children) {\n            let mesh = this.scene.children[i];\n            let data = mesh.userData;\n            let asset = {};\n            asset.scale = data.scale;\n            asset.geo = mesh.name + '.js';\n            asset.buffer = data.buffer === '1' ? true : false;\n            //console.log(data.map);\n            if (data.map) {\n                asset.map = data.map;\n                if (imgList.indexOf(data.map) === -1) {\n                    imgList.push(data.map);\n                    if (mesh.basicMaterial.map.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.map, mesh.basicMaterial.map.blob);\n                    } else {\n                        let img = mesh.basicMaterial.map.image.src.split(',');\n                        //console.log(img);\n                        locTextures.file(data.map, img[1], { base64: true });\n                    }\n                }\n\n            }\n\n            if (data.alpha) {\n                asset.alpha = data.alpha;\n                if (imgList.indexOf(data.alpha) === -1) {\n                    imgList.push(data.alpha);\n                    if (mesh.basicMaterial.alphaMap.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.alpha, mesh.basicMaterial.alphaMap.blob);\n                    } else {\n                        let img = mesh.basicMaterial.alphaMap.image.src.split(',');\n                        locTextures.file(data.alpha, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.lightmap) {\n                asset.lightmap = data.lightmap;\n                if (imgList.indexOf(data.lightmap) === -1) {\n                    imgList.push(data.lightmap);\n                    if (mesh.basicMaterial.lightMap.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.lightmap, mesh.basicMaterial.lightMap.blob);\n                    } else {\n                        let img = mesh.basicMaterial.lightMap.image.src.split(',');\n                        locTextures.file(data.lightmap, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.mixmap) {\n                asset.mixmap = data.mixmap;\n                if (imgList.indexOf(data.mixmap) === -1) {\n                    imgList.push(data.mixmap);\n                    console.log(mesh.shaderMaterial.uniforms.mixMap.value,  mesh.shaderMaterial.uniforms.mixMap.value.blob);\n                    if (mesh.shaderMaterial.uniforms.mixMap.value.image.src.indexOf('blob') !== -1) {\n                        console.log(data.mixmap, mesh.shaderMaterial.uniforms.mixMap.value.blob);\n                        locTextures.file(data.mixmap, mesh.shaderMaterial.uniforms.mixMap.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.mixMap.value.image.src.split(',');\n                        locTextures.file(data.mixmap, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap1) {\n                asset.addmap1 = data.addmap1;\n                if (imgList.indexOf(data.addmap1) === -1) {\n                    imgList.push(data.addmap1);\n                    if (mesh.shaderMaterial.uniforms.addMap1.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap1, mesh.shaderMaterial.uniforms.addMap1.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap1.value.image.src.split(',');\n                        locTextures.file(data.addmap1, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap2) {\n                asset.addmap2 = data.addmap2;\n                if (imgList.indexOf(data.addmap2) === -1) {\n                    imgList.push(data.addmap2);\n                    if (mesh.shaderMaterial.uniforms.addMap2.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap2, mesh.shaderMaterial.uniforms.addMap2.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap2.value.image.src.split(',');\n                        locTextures.file(data.addmap2, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap3) {\n                asset.addmap3 = data.addmap3;\n                if (imgList.indexOf(data.addmap3) === -1) {\n                    imgList.push(data.addmap3);\n                    if (mesh.shaderMaterial.uniforms.addMap3.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap3, mesh.shaderMaterial.uniforms.addMap3.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap3.value.image.src.split(',');\n                        locTextures.file(data.addmap3, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap4) {\n                asset.addmap4 = data.addmap4;\n                if (imgList.indexOf(data.addmap4) === -1) {\n                    imgList.push(data.addmap4);\n                    if (mesh.shaderMaterial.uniforms.addMap4.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap4, mesh.shaderMaterial.uniforms.addMap4.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap4.value.image.src.split(',');\n                        locTextures.file(data.addmap4, img[1], { base64: true });\n                    }\n                }\n            }\n\n            asset.side = parseInt(data.side);\n            if (data.shadows === '1') {\n                asset.shadows = true;\n            }\n\n            if (data.alphaTest > 0) {\n                asset.alphaTest = data.alphaTest;\n            }\n            if (data.transparent === '1') {\n                asset.transparent = true;\n            }\n\n            if (data.transparent === '1') {\n                asset.opacity = data.opacity;\n            }\n\n            asset.color = parseInt(data.color, '16');\n            if (data.collider === '1') {\n                asset.collider = true;\n            }\n\n            if (data.wirframe === '1') {\n                asset.wirframe = true;\n            }\n\n            asset.pos = data.pos;\n            asset.rot = data.rot;\n\n            assets[mesh.name] = asset;\n            obj.push({ id: mesh.name });\n\n            let geo;\n\n            if (mesh.geometry.type === 'BufferGeometry') {\n                geo = new BABYLON.Geometry();\n                geo.fromBufferGeometry(mesh.geometry);\n            } else {\n                geo = mesh.geometry;\n            }\n            //console.log(mesh.geometry, geo);\n            geo.toJSON = toJSON;\n\n            locGeometry.file(mesh.name + '.js', JSON.stringify(geo.toJSON().data));\n\n\n\n        }\n        zip.file('assets.js', JSON.stringify(assets));\n        zip.file('locations.js', JSON.stringify(locations));\n\n        zip.generateAsync({ type: \"blob\" })\n            .then(function(content) {\n                saveAs(content, \"export.zip\");\n\n            });\n\n\n    }\n\n    render() {\n        return ( <div onClick = { this.toggle } > Export </div> )\n    }\n}\n\nexport default ExportScene;","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass ResetScene extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        ReactDOM.render(<div></div>, document.getElementById(\"ui\"));\n        this.scene.children = [];\n\n    }\n\n    render() {\n        return ( <div onClick ={this.toggle} >Reset</div>\n\n        )\n    }\n}\n\nexport default ResetScene;","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ImportOBJ from \"./ImportOBJ\";\nimport ExportScene from \"./ExportScene\";\nimport ResetScene from \"./ResetScene\"\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  Nav,\n  NavItem,\n  NavLink,\n  InputGroup, InputGroupAddon, InputGroupText, Input\n} from 'reactstrap';\n\nclass Menu extends Component {\n  constructor({ scene }) {\n    super();\n    this.state = {\n      importDropdownOpen: false,\n      sceneWirframe: true\n    };\n    this.scene = scene;\n    //console.log(scene);\n\n  }\n\n  importOBJ = () => {\n    console.log('import obj');\n  }\n\n  importDAE = () => {\n    console.log('import DAE');\n  }\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <label>\n            <Input addon type=\"checkbox\" aria-label=\"Show scene wirframe\" checked={this.state.sceneWirframe} onChange={this.setSceneWirframe}/>\n            Show scene wirframe\n          </label>\n\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n\n            <NavItem>\n                <NavLink ><ResetScene scene={this.scene} /></NavLink>\n              </NavItem>\n\n\n              <NavItem>\n                <NavLink ><ExportScene scene={this.scene} /></NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink>  <ImportOBJ scene={this.scene} /></NavLink>\n              </NavItem>\n\n              \n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n\n  setSceneWirframe = () => {\n    this.setState({\n      sceneWirframe: !this.state.sceneWirframe\n    });\n    this.scene.parent.children[1].visible = !this.state.sceneWirframe;\n    console.log( this.scene.parent.children, this.state.sceneWirframe);\n  }\n}\n\nexport default Menu;\n","import React, { Component}  from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\nimport * as BABYLON from \"babylon\";\nimport  Menu from './Menu';\n\n\n\n\nconst OrbitControls = require(\"babylon-orbit-controls\")(BABYLON);\n\n\nvar scene = new BABYLON.Scene(), objectGroup = new BABYLON.Group();\nscene.add(objectGroup);\n\nclass App extends Component {\n    componentDidMount() {\n      var camera = new BABYLON.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 1, 30000 );\n      this.camera = camera;\n      var renderer = new BABYLON.WebGLRenderer();\n      this.renderer = renderer;\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      this.mount.appendChild( renderer.domElement );\n     \n      camera.position.z = 150;\n      camera.position.y = 150;\n      var size = 2500,\n      step = 50;\n      var geometry = new BABYLON.Geometry();\n     for (var i = -size; i <= size; i += step) {\n         geometry.vertices.push(new BABYLON.Vector3(-size, 0, i));\n         geometry.vertices.push(new BABYLON.Vector3(size, 0, i));\n         geometry.vertices.push(new BABYLON.Vector3(i, 0, -size));\n         geometry.vertices.push(new BABYLON.Vector3(i, 0, size));\n     }\n     var material = new BABYLON.LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n     var line = new BABYLON.LineSegments(geometry, material);\n     scene.add(line);\n\n     \n      const controls = new OrbitControls( camera, renderer.domElement );\n      var animate = function () {\n        requestAnimationFrame( animate );\n        controls.update();\n        renderer.render( scene, camera );\n      };\n      window.addEventListener('resize', this.onWindowResize, false);\n      animate();\n    }\n\n    onWindowResize = () =>{\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    render() {\n      return (\n        <div ref={ref => (this.mount = ref)} />\n      )\n    }\n  }\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nReactDOM.render(<Menu scene={objectGroup} />, document.getElementById(\"menu\"));\n"],"sourceRoot":""}