{"version":3,"sources":["ObjectUI.js","ImportOBJ.js","ExportScene.js","ResetScene.js","Menu.js","index.js"],"names":["ObjectUI","_ref","_this","mesh","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","toggle","setState","state","collapse","changeScale","event","val","target","value","scale","set","userData","changeBuffer","buffer","changeSide","parseInt","side","basicMaterial","shaderMaterial","changeShadows","shadows","changeMap","files","length","file","filename","name","reader","FileReader","img","Image","texture","BABYLON","wrapS","wrapT","onload","needsUpdate","addEventListener","src","result","readAsDataURL","map","uniforms","changeAlpha","alphaMap","transparent","alpha","changeLightMap","lightMap","lightmap","changeAlphaTest","alphaTest","changeTransparent","changeColor","color","changeCollider","collider","wireframe","changeWireframe","changeOpacity","opacity","changePosX","pos","position","x","changePosY","z","changePosZ","y","changeRotX","rot","rotation","Math","PI","changeRotY","changeRotZ","changeVisible","visisble","visible","changeMixMap","mixMap","material","mixmap","changeAddMap1","addMap1","addmap1","changeAddMap2","addMap2","addmap2","changeAddMap3","addMap3","addmap3","changeAddMap4","addMap4","addmap4","count","i","wirframe","react_default","a","createElement","Container","Row","Col","Button","onClick","style","marginBottom","Collapse","isOpen","Card","CardBody","Form","FormGroup","Label","for","Input","type","id","onChange","selected","Component","OBJLoader","ColladaLoader","ImportOBJ","scene","extension","split","pop","toLowerCase","vert","join","frag","contents","collada","parse","updateMatrixWorld","children","vertexShader","fragmentShader","geometry","applyMatrix","matrixWorld","add","ReactDOM","render","src_ObjectUI","key","uuid","document","getElementById","readAsText","object","JSZip","loadAsync","then","zip","async","assets","JSON","console","log","geos","textures","jsonloader","total","current","onLoad","mat","data","shaderMat","geo","s","fromArray","undefined","_loop","curAsset","folder","fromGeometry","Uint8Array","blob","Blob","body","appendChild","URL","createObjectURL","readAsBinaryString","alert","className","ExportScene","locTextures","locGeometry","toJSON","metadata","version","generator","parameters","vertices","vertex","push","faces","normals","normalsHash","colors","colorsHash","uvs","uvsHash","uvs2","uvsHash2","face","hasFaceVertexUv","faceVertexUvs","hasFaceVertexUv2","hasFaceNormal","normal","hasFaceVertexNormal","vertexNormals","hasFaceColor","r","g","b","hasFaceVertexColor","vertexColors","faceType","setBit","c","materialIndex","getUvIndex","faceVertexUvs2","getUvIndex2","getNormalIndex","getColorIndex","enabled","hash","toString","getHex","uv","obj","locations","imgList","asset","indexOf","image","base64","fromBufferGeometry","stringify","generateAsync","content","saveAs","ResetScene","Menu","importOBJ","importDAE","setSceneWirframe","sceneWirframe","parent","importDropdownOpen","Navbar","light","expand","addon","aria-label","checked","NavbarToggler","navbar","Nav","NavItem","NavLink","src_ImportOBJ","src_ExportScene","src_ResetScene","OrbitControls","require","objectGroup","App","onWindowResize","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","mount","domElement","line","controls","animate","requestAnimationFrame","update","_this2","ref","rootElement","src_App","src_Menu"],"mappings":"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","file":"static/js/main.c6a5bd9d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Collapse, Button, CardBody, Card, Container, Row, Col, Form, FormGroup, Label, Input } from 'reactstrap';\nimport * as BABYLON from \"babylon\";\n\nclass ObjectUI extends Component {\n  constructor({ mesh }) {\n    super();\n    //console.log(mesh.userData);\n    let count = 0;\n    var state = {};\n    for (let i in mesh.userData) {\n      count++;\n      state[i] = mesh.userData[i];\n    }\n    this.mesh = mesh;\n    if (count) {\n      this.state = state;\n    }\n    else {\n      this.state = {\n        collapse: false,\n        scale: '1',\n        buffer: '1',\n        side: '0',\n        shadows: false,\n        map: null,\n        alpha: null,\n        lightmap: null,\n        alphaTest: '0',\n        transparent: '0',\n        opacity: '1',\n        color: 'ffffff',\n        collider: '0',\n        wirframe: '0',\n        pos: [0, 0, 0],\n        rot: [0, 0, 0],\n        mixmap: null,\n        addmap1: null,\n        addmap2: null,\n        addmap3: null,\n        addmap4: null\n      };\n\n\n      this.mesh.userData = {\n        scale: '1',\n        buffer: '1',\n        side: '0',\n        shadows: false,\n        map: null,\n        alpha: null,\n        lightmap: null,\n        alphaTest: '0',\n        transparent: '0',\n        opacity: '1',\n        color: 'ffffff',\n        collider: '0',\n        wirframe: '0',\n        pos: [0, 0, 0],\n        rot: [0, 0, 0],\n        mixmap: null,\n        addmap1: null,\n        addmap2: null,\n        addmap3: null,\n        addmap4: null\n      };\n    }\n\n    this.state.visible = true;\n    //this.updateUserData();\n\n\n    //console.log(mesh);\n\n  }\n\n  toggle = () => {\n    this.setState(state => ({ collapse: !state.collapse }));\n  }\n\n  changeScale = (event) => {\n    //console.log(event.target.value);\n    let val = event.target.value;\n    this.setState(state => ({ scale: val }));\n    this.mesh.scale.set(val, val, val);\n    this.mesh.userData.scale = val;\n    //this.updateUserData();\n\n  }\n\n  changeBuffer = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ buffer: val }));\n    //this.updateUserData();\n    this.mesh.userData.buffer = val;\n  }\n\n  changeSide = (event) => {\n\n    let val = parseInt(event.target.value);\n\n    this.setState(state => ({ side: val }));\n    this.mesh.basicMaterial.side = val;\n    this.mesh.shaderMaterial.side = val;\n    //this.updateUserData();\n    this.mesh.userData.side = val;\n\n  }\n\n  changeShadows = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ shadows: val }));\n    //this.updateUserData();\n    this.mesh.userData.shadows = val;\n  }\n\n  changeMap = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.basicMaterial.map = texture;\n      this.mesh.basicMaterial.needsUpdate = true;\n      this.mesh.shaderMaterial.uniforms.map.value = texture;\n      //console.log(file.name);\n      this.setState(state => ({ map: filename }));\n      //this.updateUserData();\n      this.mesh.userData.map = filename;\n      event.target.value = '';\n    }\n\n  }\n\n  changeAlpha = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.basicMaterial.alphaMap = texture;\n      this.mesh.basicMaterial.transparent = true;\n      this.mesh.basicMaterial.needsUpdate = true;\n\n      this.setState(state => ({ alpha: filename }));\n      this.setState(state => ({ transparent: '1' }));\n      //this.updateUserData();\n      this.mesh.userData.alpha = filename;\n      this.mesh.userData.transparent = '1';\n      event.target.value = '';\n    }\n  }\n\n  changeLightMap = (event) => {\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n      //console.log(file.name);\n      //var extension = filename.split('.').pop().toLowerCase();\n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n        //console.log(texture);\n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.basicMaterial.lightMap = texture;\n      this.mesh.basicMaterial.needsUpdate = true;\n\n      this.setState(state => ({ lightMap: filename }));\n      //this.updateUserData();\n      //console.log(this.state);\n      this.mesh.userData.lightmap = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAlphaTest = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ alphaTest: val }));\n    this.mesh.basicMaterial.alphaTest = val;\n    //this.updateUserData();\n    this.mesh.userData.alphaTest = val;\n\n  }\n\n  changeTransparent = (event) => {\n    let val = parseInt(event.target.value);\n    this.setState(state => ({ transparent: val }));\n    this.mesh.basicMaterial.transparent = (val || this.state.alpha) ? true : false;\n    this.mesh.basicMaterial.needsUpdate = true;\n    //console.log(this.mesh.material.transparent, val,  this.state.alpha, (val || this.state.alpha));\n    //this.updateUserData();\n    this.mesh.userData.transparent = val;\n\n  }\n\n\n  changeColor = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ color: val }));\n    this.mesh.basicMaterial.color.set(parseInt(val, 16));\n    //this.updateUserData();\n    this.mesh.userData.color = val;\n\n  }\n\n  changeCollider = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ collider: val }));\n    if (val === '1') {\n      this.setState(state => ({ buffer: '0' }));\n    }\n    else {\n      this.setState(state => ({ buffer: '1' }));\n    }\n\n\n    this.mesh.basicMaterial.wireframe = (val == '1') ? true : false;\n\n    this.mesh.basicMaterial.needsUpdate = true;\n    //this.updateUserData();\n    this.mesh.userData.collider = val;\n\n  }\n\n  changeWireframe = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ wireframe: val }));\n\n\n    this.mesh.basicMaterial.wireframe = (val === '1' || this.state.collider == '1') ? true : false;\n\n    this.mesh.basicMaterial.needsUpdate = true;\n    //this.updateUserData();\n    this.mesh.userData.wireframe = val;\n\n  }\n\n  changeOpacity = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ opacity: val }));\n    this.mesh.basicMaterial.opacity = val;\n    //this.updateUserData();\n    this.mesh.userData.opacity = val;\n\n  }\n\n\n\n  changePosX = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [val, this.state.pos[1], this.state.pos[2]] }));\n    this.mesh.position.x = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[0] = val;\n\n  }\n\n  changePosY = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.pos[0], val, this.state.pos[2]] }));\n    this.mesh.position.z = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[1] = val;\n\n  }\n\n  changePosZ = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.pos[0], this.state.pos[1], val] }));\n    this.mesh.position.y = val;\n    //this.updateUserData();\n    this.mesh.userData.pos[2] = val;\n\n  }\n\n  changeRotX = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ rot: [val, this.state.rot[1], this.state.rot[2]] }));\n    this.mesh.rotation.x = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[0] = val;\n\n  }\n\n  changeRotY = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.rot[0], val, this.state.rot[2]] }));\n    this.mesh.rotation.y = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[1] = val;\n\n  }\n\n  changeRotZ = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ pos: [this.state.rot[0], this.state.rot[1], val] }));\n    this.mesh.rotation.z = val / 180 * Math.PI;\n    //this.updateUserData();\n    this.mesh.userData.rot[2] = val;\n  }\n\n  changeVisible = (event) => {\n    let val = event.target.value;\n    this.setState(state => ({ visisble: val }));\n    this.mesh.visible = (val == '1') ? true : false;\n    //console.log(this.mesh.visible);\n  }\n\n  changeMixMap = (event) => {\n    //let val = event.target.value;\n    //this.setState(state => ({ mixmap: val }));\n\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.mixMap.value = texture;\n      this.mesh.material = this.mesh.shaderMaterial;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ mixMap: filename }));\n      \n      this.mesh.userData.mixmap = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap1 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap1.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap1: filename }));\n      \n      this.mesh.userData.addmap1 = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap2 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap2.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap2: filename }));\n      \n      this.mesh.userData.addmap2 = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap3 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap3.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap3: filename }));\n      \n      this.mesh.userData.addmap3 = filename;\n      event.target.value = '';\n    }\n  }\n\n  changeAddMap4 = (event) => {\n    let files = event.target.files;\n    if (files.length) {\n      var file = files[0];\n      var filename = file.name;\n     \n      var reader = new FileReader();\n      let img = new Image();\n      let texture = new BABYLON.Texture(img);\n      texture.wrapS = texture.wrapT = BABYLON.RepeatWrapping;\n\n      img.onload = () => {\n        texture.needsUpdate = true;\n       \n      };\n      reader.addEventListener('load', (event) => {\n        img.src = event.target.result;\n\n      }, false);\n      reader.readAsDataURL(file);\n      this.mesh.shaderMaterial.uniforms.addMap4.value = texture;\n      //this.mesh.shaderMaterial.needsUpdate = true;\n\n      this.setState(state => ({ addMap4: filename }));\n      \n      this.mesh.userData.addmap4 = filename;\n      event.target.value = '';\n    }\n  }\n\n\n  render() {\n    //console.log(this.state.transparent);\n    return (\n      <div>\n        <Container>\n          <Row>\n            <Col>{this.mesh.name}</Col>\n            <Col>  <Button color=\"primary\" onClick={this.toggle} style={{ marginBottom: '1rem' }}>Options</Button></Col>\n          </Row>\n        </Container>\n\n        <Collapse isOpen={this.state.collapse}>\n          <Card>\n            <CardBody>\n              <Form>\n                <FormGroup>\n                  <Label for=\"buffer\">Visible</Label>\n                  <Input type=\"select\" name=\"visible\" id=\"buffer\" onChange={this.changeVisible}>\n                    <option selected={this.state.visisble == '1'}>1</option>\n                    <option selected={this.state.visisble == '0'}>0</option>\n\n\n                  </Input>\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"scale\">Scale</Label>\n                  <Input name=\"scale\" id=\"scale\" value={this.state.scale} onChange={this.changeScale} />\n                </FormGroup>\n                <FormGroup>\n                  <Label for=\"buffer\">BufferGeometry</Label>\n                  <Input type=\"select\" name=\"buffer\" id=\"buffer\" onChange={this.changeBuffer}>\n                    <option selected={this.state.buffer == '1'}>1</option>\n                    <option selected={this.state.buffer == '0'}>0</option>\n\n\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"side\">Face Side</Label>\n                  <Input type=\"select\" name=\"side\" id=\"side\" onChange={this.changeSide}>\n                    <option>0</option>\n                    <option>1</option>\n                    <option>2</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"shadows\">Floor (shadows)</Label>\n                  <Input type=\"select\" name=\"shadows\" id=\"shadows\" onChange={this.changeShadows}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n\n                <FormGroup>\n                  <Label for=\"map\">Diffuse map</Label>\n                  <Row>\n                    <Col ><Input type=\"file\" name=\"map\" id=\"map\" onChange={this.changeMap} style={{ color: 'transparent' }} /></Col>\n                    <Col>{this.mesh.userData.map}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"alpha\">Alpha map</Label>\n                  <Row>\n                    <Col >\n                      <Input type=\"file\" name=\"alpha\" id=\"alpha\" onChange={this.changeAlpha} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.alpha}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Light map</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"light\" id=\"light\" onChange={this.changeLightMap} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.lightmap}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Mix map</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeMixMap} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.mixmap}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 1</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap1} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap1}</Col>\n                  </Row>\n                </FormGroup>\n\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 2</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap2} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap2}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 3</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap3} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap3}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"light\">Addition map 4</Label>\n                  <Row>\n                    <Col >\n                  <Input type=\"file\" name=\"mix\" id=\"mix\" onChange={this.changeAddMap4} style={{ color: 'transparent' }}  /></Col>\n                    <Col>{this.mesh.userData.addmap4}</Col>\n                  </Row>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"alphaTest\">alphaTest</Label>\n                  <Input name=\"alphaTest\" id=\"alphaTest\" value={this.state.alphaTest} onChange={this.changeAlphaTest} />\n                </FormGroup>\n\n                \n\n                <FormGroup>\n                  <Label for=\"transparent\">Transparent</Label>\n                  <Input type=\"select\" name=\"transparent\" id=\"transparent\" onChange={this.changeTransparent}>\n                    <option selected={this.state.transparent == '0'}>0</option>\n                    <option selected={this.state.transparent == '1'}>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"opacity\">Opacity</Label>\n                  <Input name=\"scale\" id=\"scale\" value={this.state.opacity} onChange={this.changeOpacity} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"color\">Color</Label>\n                  <Input name=\"color\" id=\"color\" value={this.state.color} onChange={this.changeColor} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"collider\">Collider</Label>\n                  <Input type=\"select\" name=\"collider\" id=\"collider\" onChange={this.changeCollider}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"wireframe\">Wireframe</Label>\n                  <Input type=\"select\" name=\"wireframe\" id=\"wireframe\" onChange={this.changeWireframe}>\n                    <option>0</option>\n                    <option>1</option>\n                  </Input>\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"pos\">Position</Label>\n                  <Input name=\"posX\" id=\"posX\" value={this.state.pos[0]} onChange={this.changePosX} />\n                  <Input name=\"posY\" id=\"posY\" value={this.state.pos[1]} onChange={this.changePosY} />\n                  <Input name=\"posZ\" id=\"posZ\" value={this.state.pos[2]} onChange={this.changePosZ} />\n                </FormGroup>\n\n                <FormGroup>\n                  <Label for=\"pos\">Rotation</Label>\n                  <Input name=\"rotX\" id=\"rotX\" value={this.state.rot[0]} onChange={this.changeRotX} />\n                  <Input name=\"rotY\" id=\"rotY\" value={this.state.rot[1]} onChange={this.changeRotY} />\n                  <Input name=\"rotZ\" id=\"rotZ\" value={this.state.rot[2]} onChange={this.changeRotZ} />\n                </FormGroup>\n\n\n\n              </Form>\n            </CardBody>\n          </Card>\n        </Collapse>\n\n      </div>\n    )\n  }\n}\n\nexport default ObjectUI;\n","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport ObjectUI from './ObjectUI';\nimport * as BABYLON from \"babylon\";\nimport * as OBJLoader from 'babylon-obj-loader';\nimport * as ColladaLoader from 'babylon-collada-loader';\nimport './index.css';\nimport JSZip from \"jszip\";\n\nOBJLoader(BABYLON);\nColladaLoader(BABYLON);\n\nclass ImportOBJ extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        //console.log(event);\n        let files = event.target.files;\n        if (files.length) {\n            var file = files[0];\n            var filename = file.name;\n            var extension = filename.split('.').pop().toLowerCase();\n            var reader = new FileReader();\n            //console.log(this.scene);\n            let scene = this.scene;\n\n            let vert = [\n           \n            'varying vec2 vUv;',\n            'void main( void ) {',\n            '\tvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );',\n            '\tvUv = uv;',\n            '\tgl_Position = projectionMatrix * mvPosition;',\n          \n            '}'\n            ].join('\\n');\n\n            let frag = [\n                'varying vec2 vUv;',\n                'uniform sampler2D map;',\n                'uniform sampler2D mixMap;',\n                'uniform sampler2D addMap1;',\n                'uniform sampler2D addMap2;',\n                'uniform sampler2D addMap3;',\n                'uniform sampler2D addMap4;',\n               \n              \n                \n        \n        \n        \n               \n                'void main( void ) {',\n                '\tvec4 textureColor = texture2D(map, vUv);',\n                '\tvec4 mmap = texture2D(mixMap, vUv);',\n                '\tvec4 textureColor1 = texture2D(addMap1, vUv);',\n                '\tvec4 textureColor2 = texture2D(addMap2, vUv);',\n                '\tvec4 textureColor3 = texture2D(addMap3, vUv);',\n                '\tvec4 textureColor4 = texture2D(addMap4, vUv);',\n              \n                '   vec3 color = textureColor.xyz;',\n                '\tcolor = mix( color, textureColor1.xyz, mmap.r );',\n                '\tcolor = mix( color, textureColor2.xyz, mmap.g );',\n                '\tcolor = mix( color, textureColor3.xyz, mmap.b );',\n                /*'\tcolor = mix( color, textureColor4.xyz, mmap.a );',*/\n        \n                '\tgl_FragColor = vec4(color, 1.0);',\n                '}' \n            ].join('\\n');\n\n            \n          \n\n\n            switch (extension) {\n                case 'dae':\n\n                    reader.addEventListener('load', (event) => {\n\n                        var contents = event.target.result;\n                        this.BABYLON = BABYLON;\n\n                        var loader = new ColladaLoader();\n                        var collada = loader.parse(contents);\n\n                        collada.scene.name = filename;\n                        //console.log(collada);\n                        //this.scene.add(collada.scene);\n                        collada.scene.scale.set(1,1,1);\n                        collada.scene.updateMatrixWorld(true);\n                        for (let i in collada.scene.children) {\n                            collada.scene.children[i].children[0].material = new BABYLON.MeshBasicMaterial();\n                            collada.scene.children[i].children[0].basicMaterial =  collada.scene.children[i].children[0].material;\n\n                            collada.scene.children[i].children[0].shaderMaterial = new BABYLON.ShaderMaterial({\n                                vertexShader: vert,\n                                fragmentShader: frag,\n                                uniforms: {\n                \n                                    map: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    mixMap: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap1: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap2: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap3: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap4: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    }\n                                }\n                            });\n                \n\n                            collada.scene.children[i].children[0].name = collada.scene.children[i].name;\n                            //let pos = collada.scene.children[i].position;\n                            //console.log(pos);\n                            //collada.scene.children[i].children[0].position.copy(collada.scene.children[i].position);\n                            //collada.scene.children[i].children[0].geometry.translate(pos.x, pos.y, pos.z);\n                            collada.scene.children[i].children[0].geometry.applyMatrix(collada.scene.children[i].children[0].matrixWorld);\n\n                            collada.scene.children[i].children[0].position.set(0,0,0);\n                            collada.scene.children[i].children[0].rotation.set(0,0,0);\n                            collada.scene.children[i].children[0].scale.set(1,1,1);\n\n                            //console.log(collada.scene.children[i].children[0].position);\n\n                            //collada.scene.children[i].children[0].rotation.copy(collada.scene.children[i].rotation);\n                            //collada.scene.children[i].children[0].geometry.rotateX(collada.scene.children[i].rotation.x);\n                            //collada.scene.children[i].children[0].geometry.rotateY(collada.scene.children[i].rotation.y);\n                            //collada.scene.children[i].children[0].geometry.rotateZ(collada.scene.children[i].rotation.z);\n\n\n                            this.scene.add(collada.scene.children[i].children[0]);\n                        }\n                        //console.log(collada.scene.children);\n\n                        ReactDOM.render(\n                            <div>\n                                {\n                                    this.scene.children.map((mesh) => {\n\n                                        return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                    })\n                                }\n                            </div>, document.getElementById(\"ui\"));\n\n\n\n                    }, false);\n\n                    reader.readAsText(file);\n\n                    break;\n\n                case 'obj':\n\n                    reader.addEventListener('load', (event) => {\n\n                        var contents = event.target.result;\n                        //console.log( BABYLON.OBJLoader );\n                        this.BABYLON = BABYLON;\n                        var object = new this.BABYLON.OBJLoader().parse(contents);\n                        object.name = filename;\n\n                        //this.scene.add(object);\n                        //console.log(object);\n\n                        for (let i in object.children) {\n                            object.children[i].material = new BABYLON.MeshBasicMaterial();\n                            object.children[i].basicMaterial =  object.children[i].material;\n                            object.children[i].shaderMaterial = new BABYLON.ShaderMaterial({\n                                vertexShader: vert,\n                                fragmentShader: frag,\n                                uniforms: {\n                \n                                    map: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    mixMap: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap1: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap2: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap3: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    },\n                    \n                                    addMap4: {\n                                        type: \"t\",\n                                        value: new BABYLON.Texture()\n                                    }\n                                }\n                            });\n                \n                            this.scene.add(object.children[i]);\n                        }\n                        ReactDOM.render(\n                            <div>\n                                {\n                                    this.scene.children.map((mesh) => {\n\n                                        return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                    })\n                                }\n                            </div>, document.getElementById(\"ui\"));\n\n                        //console.log(object);\n\n                    }, false);\n                    reader.readAsText(file);\n\n                    break;\n\n                case 'zip':\n                    reader.addEventListener('load', (event) => {\n                        let zip = new JSZip();\n                        zip.loadAsync(event.target.result)\n                            .then(function (zip) {\n                                zip.file('assets.js').async(\"string\").then(function (value) {\n                                    //console.log(value);\n                                    let assets = JSON.parse(value);\n                                    console.log(assets);\n                                    let geos = {};\n                                    let textures = {};\n                                    let jsonloader = new BABYLON.JSONLoader();\n                                    let total = 0;\n                                    let current = 0;\n                                    let onLoad = function () {\n                                        if (current == total) {\n                                            for (let i in assets) {\n                                                let mat = new BABYLON.MeshBasicMaterial();\n\n                                                                                    \n                                                let data = {\n                                                    color: 'ffffff',\n                                                    scale: assets[i].scale,\n                                                    buffer: (assets[i].buffer) ? '1' : '0',\n                                                    side: assets[i].side,\n                                                    shadows: (assets[i].shadows) ? '1' : '0',\n                                                    alphaTest: assets[i].alphaTest || '0',\n                                                    transparent: (assets[i].transparent) ? '1' : '0',\n                                                    opacity: assets[i].opacity,\n                                                    collider: (assets[i].collider) ? '1' : '0',\n                                                    wirframe: (assets[i].wirframe) ? '1' : '0',\n                                                    pos: assets[i].pos,\n                                                    rot: assets[i].rot\n                                                };\n\n\n                                                let shaderMat = new BABYLON.ShaderMaterial({\n                                                    vertexShader: vert,\n                                                    fragmentShader: frag,\n                                                    uniforms: {\n                                    \n                                                        map: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        mixMap: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap1: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap2: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap3: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        },\n                                        \n                                                        addMap4: {\n                                                            type: \"t\",\n                                                            value: new BABYLON.Texture()\n                                                        }\n                                                    }\n                                                });\n\n                                                if (assets[i].map) {\n                                                    mat.map = textures[assets[i].map];\n                                                    data.map = assets[i].map;\n                                                    shaderMat.uniforms.map.value = textures[assets[i].map];\n                                                }\n\n                                                if (assets[i].mixmap) {\n                                                    data.mixmap = assets[i].mixmap;                                                   \n                                                    shaderMat.uniforms.mixMap.value = textures[assets[i].mixmap];\n                                                }\n\n                                                if (assets[i].addmap1) {\n                                                    data.addmap1 = assets[i].addmap1; \n                                                    shaderMat.uniforms.addMap1.value = textures[assets[i].addmap1];\n                                                }\n\n                                                if (assets[i].addmap2) {\n                                                    data.addmap2 = assets[i].addmap2; \n                                                    shaderMat.uniforms.addMap2.value = textures[assets[i].addmap2];\n                                                }\n\n                                                if (assets[i].addmap3) {\n                                                    data.addmap3 = assets[i].addmap3; \n                                                    shaderMat.uniforms.addMap3.value = textures[assets[i].addmap3];\n                                                }\n\n                                                if (assets[i].addmap4) {\n                                                    data.addmap4 = assets[i].addmap4; \n                                                    shaderMat.uniforms.addMap4.value = textures[assets[i].addmap4];\n                                                }\n\n\n\n\n                                                if (assets[i].alpha) {\n                                                    mat.alphaMap = textures[assets[i].alpha];\n                                                    data.alpha = assets[i].alpha;\n                                                  \n                                                }\n\n                                                if (assets[i].lightmap) {\n                                                    mat.lightMap = textures[assets[i].lightmap];\n                                                    data.lightmap = assets[i].lightmap;\n                                                }\n\n                                                let mesh = new BABYLON.Mesh(geos[assets[i].geo], mat);\n\n                                                //console.log();\n                                                mesh.userData = data;\n\n                                                if (assets[i].alphaTest) {\n                                                    mat.alphaTest = assets[i].alphaTest;\n                                                }\n\n                                                if (assets[i].transparent) {\n                                                    mat.transparent = true;\n                                                }\n\n                                                if (assets[i].collider || assets[i].wireframe) {\n                                                    mat.wireframe = true\n                                                }\n\n                                                if (assets[i].side) {\n                                                    mat.side = assets[i].side;\n                                                }\n\n                                                if (assets[i].scale) {\n                                                    let s = assets[i].scale;\n                                                    mesh.scale.set(s, s, s);\n                                                }\n\n                                                let pos = data.pos;\n                                                mesh.position.fromArray(pos);\n\n                                                let rot = assets[i].rot;\n                                                mesh.rotation.x = rot[0] / 180 * Math.PI;\n                                                mesh.rotation.y = rot[1] / 180 * Math.PI;\n                                                mesh.rotation.z = rot[2] / 180 * Math.PI;\n\n                                                if (assets[i].opacity !== undefined) {\n                                                    mat.opacity = assets[i].opacity;\n                                                }\n\n\n\n                                                mesh.basicMaterial = mat;\n                                                mesh.shaderMaterial = shaderMat;\n                                                if(data.mixmap) {\n                                                    mesh.material = shaderMat;\n                                                    console.log(data.mixmap, shaderMat);\n                                                }\n                                                mesh.name = i;\n                                                scene.add(mesh);\n                                                //scope.scene.add(mesh);\n\n                                            }\n                                            //console.log(scene);\n\n                                            ReactDOM.render(\n                                                <div>\n                                                    {\n                                                        scene.children.map((mesh) => {\n\n                                                            return (<ObjectUI key={mesh.uuid} mesh={mesh} />);\n                                                        })\n                                                    }\n                                                </div>, document.getElementById(\"ui\"));\n                                        }\n                                        \n                                    };\n                                    for (let i in assets) {\n                                        total++;\n                                        let curAsset = assets[i];\n                                        zip.folder('geometry').folder('loc').file(assets[i].geo).async('string').then(function (value) {\n                                            current++;\n                                            let geo = jsonloader.parse(JSON.parse(value));\n                                            geos[curAsset.geo] = new BABYLON.BufferGeometry();\n                                            geos[curAsset.geo].fromGeometry(geo.geometry);\n                                            //console.log(geo);\n\n                                            onLoad();\n                                        });\n\n                                        if (assets[i].map) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].map).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.map] = new BABYLON.Texture(img);\n                                                    textures[curAsset.map].needsUpdate = true;\n                                                    textures[curAsset.map].wrapS = textures[curAsset.map].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.map].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].alpha) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].alpha).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.alpha] = new BABYLON.Texture(img);\n                                                    textures[curAsset.alpha].needsUpdate = true;\n                                                    textures[curAsset.alpha].wrapS = textures[curAsset.alpha].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.alpha].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].lightmap) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].lightmap).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.lightmap] = new BABYLON.Texture(img);\n                                                    textures[curAsset.lightmap].needsUpdate = true;\n                                                    textures[curAsset.lightmap].wrapS = textures[curAsset.lightmap].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.lightmap].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].mixmap) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].mixmap).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.mixmap] = new BABYLON.Texture(img);\n                                                    textures[curAsset.mixmap].needsUpdate = true;\n                                                    textures[curAsset.mixmap].wrapS = textures[curAsset.mixmap].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.mixmap].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].addmap1) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap1).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap1] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap1].needsUpdate = true;\n                                                    textures[curAsset.addmap1].wrapS = textures[curAsset.addmap1].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap1].blob = blob;\n\n                                                });\n                                        }\n\n\n                                        if (assets[i].addmap2) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap2).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap2] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap2].needsUpdate = true;\n                                                    textures[curAsset.addmap2].wrapS = textures[curAsset.addmap2].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap2].blob = blob;\n\n                                                });\n                                        }\n\n\n                                        if (assets[i].addmap3) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap3).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap3] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap3].needsUpdate = true;\n                                                    textures[curAsset.addmap3].wrapS = textures[curAsset.addmap3].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap3].blob = blob;\n\n                                                });\n                                        }\n\n                                        if (assets[i].addmap4) {\n                                            total++;\n                                            zip.folder('textures').folder('loc')\n                                                .file(assets[i].addmap4).async('arraybuffer').then(function (value) {\n                                                    let buffer = new Uint8Array(value);\n                                                    let blob = new Blob([buffer.buffer]);\n                                                    let img = new Image;\n                                                    img.onload = function () {\n                                                        current++;\n                                                        onLoad();\n                                                        document.body.appendChild(this);\n                                                    }\n                                                    img.src = URL.createObjectURL(blob);\n                                                    textures[curAsset.addmap4] = new BABYLON.Texture(img);\n                                                    textures[curAsset.addmap4].needsUpdate = true;\n                                                    textures[curAsset.addmap4].wrapS = textures[curAsset.addmap4].wrapT = BABYLON.RepeatWrapping;\n                                                    textures[curAsset.addmap4].blob = blob;\n\n                                                });\n                                        }\n\n                                    }\n                                });\n                                // you now have every files contained in the loaded zip\n                                //new_zip.file(\"hello.txt\").async(\"string\"); // a promise of \"Hello World\\n\"\n                            });\n                    }, false);\n                    reader.readAsBinaryString(file);\n\n                    break;\n                default:\n                    alert('bad format');\n                    break;\n            }\n            event.target.value = '';\n           \n        }\n    }\n\n    render() {\n        return (\n            <label>Import<input type=\"file\" name=\"file\" onChange={this.toggle} className=\"hidden\" /></label>\n\n        )\n    }\n}\n\nexport default ImportOBJ;\n\n\n","import React, { Component } from \"react\";\nimport JSZip from \"jszip\";\nimport * as BABYLON from \"babylon\";\nimport { saveAs } from '@progress/kendo-file-saver';\n\nclass ExportScene extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        let zip = new JSZip();\n        let textures = zip.folder(\"textures\");\n        let locTextures = textures.folder('loc');\n        let geometry = zip.folder(\"geometry\");\n        let locGeometry = geometry.folder(\"loc\");\n\n        let toJSON = function() {\n\n            var data = {\n                metadata: {\n                    version: 4.5,\n                    type: 'Geometry',\n                    generator: 'Geometry.toJSON'\n                }\n            };\n\n            // standard Geometry serialization\n\n            data.uuid = this.uuid;\n            data.type = this.type;\n            if (this.name !== '') data.name = this.name;\n\n            if (this.parameters !== undefined) {\n\n                var parameters = this.parameters;\n\n                for (var key in parameters) {\n\n                    if (parameters[key] !== undefined) data[key] = parameters[key];\n\n                }\n\n                return data;\n\n            }\n\n            var vertices = [];\n\n            for (var i = 0; i < this.vertices.length; i++) {\n\n                var vertex = this.vertices[i];\n                vertices.push(vertex.x, vertex.y, vertex.z);\n\n            }\n\n            var faces = [];\n            var normals = [];\n            var normalsHash = {};\n            var colors = [];\n            var colorsHash = {};\n            var uvs = [];\n            var uvsHash = {};\n            var uvs2 = [];\n            var uvsHash2 = {};\n\n            for (var i = 0; i < this.faces.length; i++) {\n\n                var face = this.faces[i];\n\n                var hasMaterial = true;\n                var hasFaceUv = false; // deprecated\n                var hasFaceVertexUv = this.faceVertexUvs[0][i] !== undefined;\n                var hasFaceVertexUv2 = this.faceVertexUvs[1] !== undefined;\n                var hasFaceNormal = face.normal.length() > 0;\n                var hasFaceVertexNormal = face.vertexNormals.length > 0;\n                var hasFaceColor = face.color.r !== 1 || face.color.g !== 1 || face.color.b !== 1;\n                var hasFaceVertexColor = face.vertexColors.length > 0;\n\n                var faceType = 0;\n\n                faceType = setBit(faceType, 0, 0); // isQuad\n                faceType = setBit(faceType, 1, hasMaterial);\n                faceType = setBit(faceType, 2, hasFaceUv);\n                faceType = setBit(faceType, 3, hasFaceVertexUv);\n                faceType = setBit(faceType, 4, hasFaceNormal);\n                faceType = setBit(faceType, 5, hasFaceVertexNormal);\n                faceType = setBit(faceType, 6, hasFaceColor);\n                faceType = setBit(faceType, 7, hasFaceVertexColor);\n\n                faces.push(faceType);\n                faces.push(face.a, face.b, face.c);\n                faces.push(face.materialIndex);\n\n                if (hasFaceVertexUv) {\n\n                    var faceVertexUvs = this.faceVertexUvs[0][i];\n\n                    faces.push(\n                        getUvIndex(faceVertexUvs[0]),\n                        getUvIndex(faceVertexUvs[1]),\n                        getUvIndex(faceVertexUvs[2])\n                    );\n\n                }\n\n                if (hasFaceVertexUv2) {\n\n                    var faceVertexUvs2 = this.faceVertexUvs[1][i];\n\n                    faces.push(\n                        getUvIndex2(faceVertexUvs2[0]),\n                        getUvIndex2(faceVertexUvs2[1]),\n                        getUvIndex2(faceVertexUvs2[2])\n                    );\n\n                } else {\n                    console.log('no uv2');\n                }\n\n                if (hasFaceNormal) {\n\n                    faces.push(getNormalIndex(face.normal));\n\n                }\n\n                if (hasFaceVertexNormal) {\n\n                    var vertexNormals = face.vertexNormals;\n\n                    faces.push(\n                        getNormalIndex(vertexNormals[0]),\n                        getNormalIndex(vertexNormals[1]),\n                        getNormalIndex(vertexNormals[2])\n                    );\n\n                }\n\n                if (hasFaceColor) {\n\n                    faces.push(getColorIndex(face.color));\n\n                }\n\n                if (hasFaceVertexColor) {\n\n                    var vertexColors = face.vertexColors;\n\n                    faces.push(\n                        getColorIndex(vertexColors[0]),\n                        getColorIndex(vertexColors[1]),\n                        getColorIndex(vertexColors[2])\n                    );\n\n                }\n\n            }\n\n            function setBit(value, position, enabled) {\n\n                return enabled ? value | (1 << position) : value & (~(1 << position));\n\n            }\n\n            function getNormalIndex(normal) {\n\n                var hash = normal.x.toString() + normal.y.toString() + normal.z.toString();\n\n                if (normalsHash[hash] !== undefined) {\n\n                    return normalsHash[hash];\n\n                }\n\n                normalsHash[hash] = normals.length / 3;\n                normals.push(normal.x, normal.y, normal.z);\n\n                return normalsHash[hash];\n\n            }\n\n            function getColorIndex(color) {\n\n                var hash = color.r.toString() + color.g.toString() + color.b.toString();\n\n                if (colorsHash[hash] !== undefined) {\n\n                    return colorsHash[hash];\n\n                }\n\n                colorsHash[hash] = colors.length;\n                colors.push(color.getHex());\n\n                return colorsHash[hash];\n\n            }\n\n            function getUvIndex(uv) {\n\n                var hash = uv.x.toString() + uv.y.toString();\n\n                if (uvsHash[hash] !== undefined) {\n\n                    return uvsHash[hash];\n\n                }\n\n                uvsHash[hash] = uvs.length / 2;\n                uvs.push(uv.x, uv.y);\n\n                return uvsHash[hash];\n\n            }\n\n            function getUvIndex2(uv) {\n\n                var hash = uv.x.toString() + uv.y.toString();\n\n                if (uvsHash2[hash] !== undefined) {\n\n                    return uvsHash2[hash];\n\n                }\n\n                uvsHash2[hash] = uvs2.length / 2;\n                uvs2.push(uv.x, uv.y);\n\n                return uvsHash2[hash];\n\n            }\n\n            data.data = {};\n\n            data.data.vertices = vertices;\n            data.data.normals = normals;\n            if (colors.length > 0) data.data.colors = colors;\n            if (uvs.length > 0) data.data.uvs = [uvs]; // temporal backward compatibility\n            if (uvs2.length > 0) data.data.uvs.push(uvs2);\n            console.log(uvs2);\n            data.data.faces = faces;\n\n            return data;\n\n        };\n\n\n        let assets = {};\n        let obj = [];\n        let locations = {\n            obj: obj,\n            z: 20\n        };\n        let imgList = [];\n        for (let i in this.scene.children) {\n            let mesh = this.scene.children[i];\n            let data = mesh.userData;\n            let asset = {};\n            asset.scale = data.scale;\n            asset.geo = mesh.name + '.js';\n            asset.buffer = data.buffer === '1' ? true : false;\n            //console.log(data.map);\n            if (data.map) {\n                asset.map = data.map;\n                if (imgList.indexOf(data.map) === -1) {\n                    imgList.push(data.map);\n                    if (mesh.basicMaterial.map.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.map, mesh.basicMaterial.map.blob);\n                    } else {\n                        let img = mesh.basicMaterial.map.image.src.split(',');\n                        //console.log(img);\n                        locTextures.file(data.map, img[1], { base64: true });\n                    }\n                }\n\n            }\n\n            if (data.alpha) {\n                asset.alpha = data.alpha;\n                if (imgList.indexOf(data.alpha) === -1) {\n                    imgList.push(data.alpha);\n                    if (mesh.basicMaterial.alphaMap.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.alpha, mesh.basicMaterial.alphaMap.blob);\n                    } else {\n                        let img = mesh.basicMaterial.alphaMap.image.src.split(',');\n                        locTextures.file(data.alpha, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.lightmap) {\n                asset.lightmap = data.lightmap;\n                if (imgList.indexOf(data.lightmap) === -1) {\n                    imgList.push(data.lightmap);\n                    if (mesh.basicMaterial.lightMap.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.lightmap, mesh.basicMaterial.lightMap.blob);\n                    } else {\n                        let img = mesh.basicMaterial.lightMap.image.src.split(',');\n                        locTextures.file(data.lightmap, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.mixmap) {\n                asset.mixmap = data.mixmap;\n                if (imgList.indexOf(data.mixmap) === -1) {\n                    imgList.push(data.mixmap);\n                    if (mesh.shaderMaterial.uniforms.mixMap.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.mixmap, mesh.shaderMaterial.mixMap.uniforms.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.mixMap.value.image.src.split(',');\n                        locTextures.file(data.mixmap, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap1) {\n                asset.addmap1 = data.addmap1;\n                if (imgList.indexOf(data.addmap1) === -1) {\n                    imgList.push(data.addmap1);\n                    if (mesh.shaderMaterial.uniforms.addMap1.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap1, mesh.shaderMaterial.uniforms.addMap1.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap1.value.image.src.split(',');\n                        locTextures.file(data.addmap1, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap2) {\n                asset.addmap2 = data.addmap2;\n                if (imgList.indexOf(data.addmap2) === -1) {\n                    imgList.push(data.addmap2);\n                    if (mesh.shaderMaterial.uniforms.addMap2.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap2, mesh.shaderMaterial.uniforms.addMap2.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap2.value.image.src.split(',');\n                        locTextures.file(data.addmap2, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap3) {\n                asset.addmap3 = data.addmap3;\n                if (imgList.indexOf(data.addmap3) === -1) {\n                    imgList.push(data.addmap3);\n                    if (mesh.shaderMaterial.uniforms.addMap3.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap3, mesh.shaderMaterial.uniforms.addMap3.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap3.value.image.src.split(',');\n                        locTextures.file(data.addmap3, img[1], { base64: true });\n                    }\n                }\n            }\n\n            if (data.addmap4) {\n                asset.addmap4 = data.addmap4;\n                if (imgList.indexOf(data.addmap4) === -1) {\n                    imgList.push(data.addmap4);\n                    if (mesh.shaderMaterial.uniforms.addMap4.value.image.src.indexOf('blob') !== -1) {\n                        locTextures.file(data.addmap4, mesh.shaderMaterial.uniforms.addMap4.value.blob);\n                    } else {\n                        let img = mesh.shaderMaterial.uniforms.addMap4.value.image.src.split(',');\n                        locTextures.file(data.addmap4, img[1], { base64: true });\n                    }\n                }\n            }\n\n            asset.side = parseInt(data.side);\n            if (data.shadows === '1') {\n                asset.shadows = true;\n            }\n\n            if (data.alphaTest > 0) {\n                asset.alphaTest = data.alphaTest;\n            }\n            if (data.transparent === '1') {\n                asset.transparent = true;\n            }\n\n            asset.opacity = data.opacity;\n\n            asset.color = parseInt(data.color, '16');\n            if (data.collider === '1') {\n                asset.collider = true;\n            }\n\n            if (data.wirframe === '1') {\n                asset.wirframe = true;\n            }\n\n            asset.pos = data.pos;\n            asset.rot = data.rot;\n\n            assets[mesh.name] = asset;\n            obj.push({ id: mesh.name });\n\n            let geo;\n\n            if (mesh.geometry.type === 'BufferGeometry') {\n                geo = new BABYLON.Geometry();\n                geo.fromBufferGeometry(mesh.geometry);\n            } else {\n                geo = mesh.geometry;\n            }\n            //console.log(mesh.geometry, geo);\n            geo.toJSON = toJSON;\n\n            locGeometry.file(mesh.name + '.js', JSON.stringify(geo.toJSON().data));\n\n\n\n        }\n        zip.file('assets.js', JSON.stringify(assets));\n        zip.file('locations.js', JSON.stringify(locations));\n\n        zip.generateAsync({ type: \"blob\" })\n            .then(function(content) {\n                saveAs(content, \"export.zip\");\n\n            });\n\n\n    }\n\n    render() {\n        return ( < div onClick = { this.toggle } > Export < /div>\n\n        )\n    }\n}\n\nexport default ExportScene;","import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nclass ResetScene extends Component {\n    constructor({ scene }) {\n        super();\n\n        this.scene = scene;\n\n    }\n\n    toggle = (event) => {\n        ReactDOM.render(<div></div>, document.getElementById(\"ui\"));\n        this.scene.children = [];\n\n    }\n\n    render() {\n        return ( <div onClick ={this.toggle} >Reset</div>\n\n        )\n    }\n}\n\nexport default ResetScene;","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport ImportOBJ from \"./ImportOBJ\";\nimport ExportScene from \"./ExportScene\";\nimport ResetScene from \"./ResetScene\"\n\nimport {\n  Collapse,\n  Navbar,\n  NavbarToggler,\n  Nav,\n  NavItem,\n  NavLink,\n  InputGroup, InputGroupAddon, InputGroupText, Input\n} from 'reactstrap';\n\nclass Menu extends Component {\n  constructor({ scene }) {\n    super();\n    this.state = {\n      importDropdownOpen: false,\n      sceneWirframe: true\n    };\n    this.scene = scene;\n    //console.log(scene);\n\n  }\n\n  importOBJ = () => {\n    console.log('import obj');\n  }\n\n  importDAE = () => {\n    console.log('import DAE');\n  }\n\n  toggle = () => {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Navbar color=\"light\" light expand=\"md\">\n          <label>\n            <Input addon type=\"checkbox\" aria-label=\"Show scene wirframe\" checked={this.state.sceneWirframe} onChange={this.setSceneWirframe}/>\n            Show scene wirframe\n          </label>\n\n          <NavbarToggler onClick={this.toggle} />\n          <Collapse isOpen={this.state.isOpen} navbar>\n            <Nav className=\"ml-auto\" navbar>\n\n              <NavItem>\n                <NavLink>  <ImportOBJ scene={this.scene} /></NavLink>\n              </NavItem>\n\n\n              <NavItem>\n                <NavLink ><ExportScene scene={this.scene} /></NavLink>\n              </NavItem>\n\n              <NavItem>\n                <NavLink ><ResetScene scene={this.scene} /></NavLink>\n              </NavItem>\n            </Nav>\n          </Collapse>\n        </Navbar>\n      </div>\n    )\n  }\n\n  setSceneWirframe = () => {\n    this.setState({\n      sceneWirframe: !this.state.sceneWirframe\n    });\n    this.scene.parent.children[1].visible = !this.state.sceneWirframe;\n    console.log( this.scene.parent.children, this.state.sceneWirframe);\n  }\n}\n\nexport default Menu;\n","import React, { Component}  from \"react\";\nimport ReactDOM from \"react-dom\";\nimport './index.css';\nimport * as BABYLON from \"babylon\";\nimport  Menu from './Menu';\n\n\n\n\nconst OrbitControls = require(\"babylon-orbit-controls\")(BABYLON);\n\n\nvar scene = new BABYLON.Scene(), objectGroup = new BABYLON.Group();\nscene.add(objectGroup);\n\nclass App extends Component {\n    componentDidMount() {\n      var camera = new BABYLON.PerspectiveCamera( 75, window.innerWidth/window.innerHeight, 1, 30000 );\n      this.camera = camera;\n      var renderer = new BABYLON.WebGLRenderer();\n      this.renderer = renderer;\n      renderer.setSize( window.innerWidth, window.innerHeight );\n      this.mount.appendChild( renderer.domElement );\n     \n      camera.position.z = 150;\n      camera.position.y = 150;\n      var size = 2500,\n      step = 50;\n      var geometry = new BABYLON.Geometry();\n     for (var i = -size; i <= size; i += step) {\n         geometry.vertices.push(new BABYLON.Vector3(-size, 0, i));\n         geometry.vertices.push(new BABYLON.Vector3(size, 0, i));\n         geometry.vertices.push(new BABYLON.Vector3(i, 0, -size));\n         geometry.vertices.push(new BABYLON.Vector3(i, 0, size));\n     }\n     var material = new BABYLON.LineBasicMaterial({ color: 0xffffff, opacity: 0.5, transparent: true });\n     var line = new BABYLON.LineSegments(geometry, material);\n     scene.add(line);\n\n     \n      const controls = new OrbitControls( camera, renderer.domElement );\n      var animate = function () {\n        requestAnimationFrame( animate );\n        controls.update();\n        renderer.render( scene, camera );\n      };\n      window.addEventListener('resize', this.onWindowResize, false);\n      animate();\n    }\n\n    onWindowResize = () =>{\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(window.innerWidth, window.innerHeight);\n    }\n\n    render() {\n      return (\n        <div ref={ref => (this.mount = ref)} />\n      )\n    }\n  }\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<App />, rootElement);\n\nReactDOM.render(<Menu scene={objectGroup} />, document.getElementById(\"menu\"));\n"],"sourceRoot":""}